apply plugin: 'com.android.application'
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
android {
    signingConfigs {
        config {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile rootProject.file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.nirmal.jeffrey.flickvibes"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        //strip other than english resources
        resConfigs "en"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8

        }
    }
    buildTypes {
        debug{
            debuggable true
        }
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
        buildTypes.each{
            // ApiKey is hidden in .gradle file. To know more about this, see the below link
            //https://medium.com/code-better/hiding-api-keys-from-your-android-repository-b23f5598b906
            it.buildConfigField 'String', "ApiKey", flick_vibes_tmdb_api_key
        }

        splits {
            abi {
                enable true
                reset()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk false
            }
        }
}
ext.abiCodes = ['x86': 1, 'x86_64': 2, 'armeabi-v7a': 3, 'arm64-v8a': 4]

android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

ext {
    retrofit_version = "2.5.0"
    lifecycle_version = '2.0.0'
    design_version = '1.0.0'
    butter_knife_version = "10.1.0"
    glide_version = "4.9.0"
    expandable_text_view_version = "1.0.5"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    //Design Support Library
    implementation "com.google.android.material:material:$design_version"
    //CardView
    implementation "androidx.cardview:cardview:$design_version"
    //RecyclerView
    implementation "androidx.recyclerview:recyclerview:$design_version"
    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    //Gson
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    //LiveData and ViewModel
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    //Room
    implementation "androidx.room:room-runtime:$lifecycle_version"
    annotationProcessor "androidx.room:room-compiler:$lifecycle_version"
    //ButterKnife
    implementation "com.jakewharton:butterknife:$butter_knife_version"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butter_knife_version"
    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    //Expandable TextView
    implementation "at.blogc:expandabletextview:$expandable_text_view_version"
    //FireBase core
    implementation 'com.google.firebase:firebase-core:16.0.8'
    //FireBase cloud messaging for notifications
    implementation "com.google.firebase:firebase-messaging:17.6.0"
    //FireBase Face detection
    implementation "com.google.firebase:firebase-ml-vision:19.0.3"
    implementation "com.google.firebase:firebase-ml-vision-face-model:17.0.2"
    //Stetho
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation'com.facebook.stetho:stetho-okhttp3:1.5.1'
}
apply plugin: 'com.google.gms.google-services'
